// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/unscrabble/unscrabble/model (interfaces: LetterGetter)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLetterGetter is a mock of LetterGetter interface.
type MockLetterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLetterGetterMockRecorder
}

// MockLetterGetterMockRecorder is the mock recorder for MockLetterGetter.
type MockLetterGetterMockRecorder struct {
	mock *MockLetterGetter
}

// NewMockLetterGetter creates a new mock instance.
func NewMockLetterGetter(ctrl *gomock.Controller) *MockLetterGetter {
	mock := &MockLetterGetter{ctrl: ctrl}
	mock.recorder = &MockLetterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLetterGetter) EXPECT() *MockLetterGetterMockRecorder {
	return m.recorder
}

// GetLetter mocks base method.
func (m *MockLetterGetter) GetLetter() (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetter")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLetter indicates an expected call of GetLetter.
func (mr *MockLetterGetterMockRecorder) GetLetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetter", reflect.TypeOf((*MockLetterGetter)(nil).GetLetter))
}

// HasLetter mocks base method.
func (m *MockLetterGetter) HasLetter() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLetter")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLetter indicates an expected call of HasLetter.
func (mr *MockLetterGetterMockRecorder) HasLetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLetter", reflect.TypeOf((*MockLetterGetter)(nil).HasLetter))
}
