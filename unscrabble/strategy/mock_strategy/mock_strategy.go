// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/unscrabble/unscrabble/strategy (interfaces: MoveGenerator)

// Package mock_strategy is a generated GoMock package.
package mock_strategy

import (
	reflect "reflect"

	model "example.com/unscrabble/unscrabble/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMoveGenerator is a mock of MoveGenerator interface.
type MockMoveGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockMoveGeneratorMockRecorder
}

// MockMoveGeneratorMockRecorder is the mock recorder for MockMoveGenerator.
type MockMoveGeneratorMockRecorder struct {
	mock *MockMoveGenerator
}

// NewMockMoveGenerator creates a new mock instance.
func NewMockMoveGenerator(ctrl *gomock.Controller) *MockMoveGenerator {
	mock := &MockMoveGenerator{ctrl: ctrl}
	mock.recorder = &MockMoveGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoveGenerator) EXPECT() *MockMoveGeneratorMockRecorder {
	return m.recorder
}

// GenerateMoves mocks base method.
func (m *MockMoveGenerator) GenerateMoves(arg0 model.Board, arg1 model.Rack) []model.Move {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMoves", arg0, arg1)
	ret0, _ := ret[0].([]model.Move)
	return ret0
}

// GenerateMoves indicates an expected call of GenerateMoves.
func (mr *MockMoveGeneratorMockRecorder) GenerateMoves(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMoves", reflect.TypeOf((*MockMoveGenerator)(nil).GenerateMoves), arg0, arg1)
}
