// Code generated by MockGen. DO NOT EDIT.
// Source: unscrabble.go

// Package unscrabble is a generated GoMock package.
package unscrabble

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLexicon is a mock of Lexicon interface
type MockLexicon struct {
	ctrl     *gomock.Controller
	recorder *MockLexiconMockRecorder
}

// MockLexiconMockRecorder is the mock recorder for MockLexicon
type MockLexiconMockRecorder struct {
	mock *MockLexicon
}

// NewMockLexicon creates a new mock instance
func NewMockLexicon(ctrl *gomock.Controller) *MockLexicon {
	mock := &MockLexicon{ctrl: ctrl}
	mock.recorder = &MockLexiconMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLexicon) EXPECT() *MockLexiconMockRecorder {
	return m.recorder
}

// Contains mocks base method
func (m *MockLexicon) Contains(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains
func (mr *MockLexiconMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockLexicon)(nil).Contains), arg0)
}

// ValidLettersBetweenPrefixAndSuffix mocks base method
func (m *MockLexicon) ValidLettersBetweenPrefixAndSuffix(arg0, arg1 string) map[rune]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidLettersBetweenPrefixAndSuffix", arg0, arg1)
	ret0, _ := ret[0].(map[rune]struct{})
	return ret0
}

// ValidLettersBetweenPrefixAndSuffix indicates an expected call of ValidLettersBetweenPrefixAndSuffix
func (mr *MockLexiconMockRecorder) ValidLettersBetweenPrefixAndSuffix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidLettersBetweenPrefixAndSuffix", reflect.TypeOf((*MockLexicon)(nil).ValidLettersBetweenPrefixAndSuffix), arg0, arg1)
}
